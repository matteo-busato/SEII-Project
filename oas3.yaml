openapi: 3.0.0
info:
  version: '1.0'
  title: "EasyMusic OpenAPI 3.0"
  description: API for managing artists and their discography.
  license:
    name: MIT
servers:
  - url: http://localhost:8000/api/v1
    description: Localhost
paths:

  /users:
    post:
      description: >-
        Register a new user to the website as a simple user
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
            example:
              name: "John"
              email: "john@gmail.com"
              password: "5up3rS3cr3t4ndL0ngP4ssw0rd"
      responses:
        '201':
          description: 'User registered successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - 'User registered successfully'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The field 'name' must be a non-empty string"
                      - "The field 'email' must be a non-empty string"
                      - "The field 'password' must be a non-empty string"
                      - "Invalid email format"
        '409':
          description: 'Duplicated email'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "This email is already registered"

  /users/auth:
    post:
      description: >-
        Login in the website retrying an authorization token
      summary: Login with token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "john@gmail.com"
              password: "5up3rS3cr3t4ndL0ngP4ssw0rd"
      responses:
        '201':
          description: 'User logged successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  status:
                    type: string
                  username:
                    type: string
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlclR5cGUiOiJ1c2VyIiwiaWF0IjoxNjA1NjAyMTA1LCJleHAiOjE2MDU2ODg1MDUsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8ifQ.eaK2vBDjZzfYjjD27pzxj9kIhplKf4Yx2lY5iIJs8sI"
                status: "user"
                username: "mario_rossi"
                  
        '401':
          description: 'wrong password'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "wrong password"
        '404':
          description: 'wrong email'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "wrong email"
        '501':
          description: 'hashing password problems'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "something goes wrong, please retry."
  
  /overview:
    get:
      description: >-
        Gets some information included in the website. Used to show some data in the mainpage.
      summary: Gets some albums/events/merch
      responses:
        '200':
          description: 'Collection of albums/events/merch'
          content:
            application/json:
              schema:
                type: object
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "Database errors"
                      
  /overview/:name:
    get:
      description: >-
        Gets some information included in the website. Used to show some data in the mainpage.
      summary: Gets some albums/events/merch and followed artists by logged user
      responses:
        '200':
          description: 'Collection of albums/events/merch and followed artists'
          content:
            application/json:
              schema:
                type: object
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "Database errors"
                      
  /artists:
    get:
      description: >-
        Gets the list of artists.
      summary: View all artists
      responses:
        '200':
          description: 'Collection of artists'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting users"

  /albums:
    get:
      description: >-
        Gets the list of albums.
      summary: View all albums
      responses:
        '200':
          description: 'Collection of albums'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting albums"

  /merch:
    get:
      description: >-
        Gets the list of merch.
      summary: View all merch
      responses:
        '200':
          description: 'Collection of merch'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Merch'
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting merch"

  /events:
    get:
      description: >-
        Gets the list of events.
      summary: View all events
      responses:
        '200':
          description: 'Collection of events'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting events"

  /artists/:name:
    get:
      description: >-
        Gets the artist specified.
      summary: View an artist
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'information about an artist with 5 albums, 5 merch and 5 events'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
                      - "no artist with name :name"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :name does not exists"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting objects"
    post:
      description: >-
        Add informations about the artist specified.
      summary: Manage informations 
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
          description: The informations to be add
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Informations posted with success
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message:
                    type: string
        '300':
          description: Some informations are empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error on posting the informations
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      description: >-
        Allows to delete artist informations
      summary: Delete informations
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: bio
          required: true
          schema:
            type: string
          description: the artist's biography
        - in: path
          name: password
          required: true
          schema:
            type: string
          description: the artist's password
        - in: path
          name: bio
          required: true
          schema:
            type: string
          description: the artist's genre
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: the artist's email
      responses:
        '200':
          description: Artist informations deleted with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error on deleting the album
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      description: >-
        Allows to change artist informations
      summary: Change informations
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: bio
          required: true
          schema:
            type: string
          description: the artist's biography
        - in: path
          name: password
          required: true
          schema:
            type: string
          description: the artist's password
        - in: path
          name: bio
          required: true
          schema:
            type: string
          description: the artist's genre
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: the artist's email
        
      requestBody:
        description: the artist's informations to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Artist's data changed with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error on changing the artist's data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string   
                    
  /albums/:ismn:
    get:
      description: >-
        Gets the album specified.
      summary: View an album
      parameters:
        - in: path
          name: ismn
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'get all the information about the album selected by ismn'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on ismn param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The album :ismn does not exists"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting albums"
                      
  /merch/:id:
    get:
      description: >-
        Gets the merch specified.
      summary: View a merch
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'get all the information about a merch selected by id'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Merch'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on id param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The product :id does not exists"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting merch"                      

  /events/:id:
    get:
      description: >-
        Gets the event specified.
      summary: View a event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'get all the information about a event selected by id'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on id param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The event :id does not exists"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting event"

  /artists/:name/albums:
    get:
      description: >-
        Gets the list of albums of an artist :name.
      summary: View all albums of an artist
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Collection of albums of an artist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :name does not exist"
                      - "no albums from artist with name :name"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting objects"
    post:
      description: >-
        Allows to post a new album to the artist's discography
      summary: post new album
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
      requestBody:
        description: the album to be posted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '201':
          description: Album posted with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                     - 'The album has been correctly inserted in the db with ISMN = :ismn' 
        '400':
          description: Error on posting the album
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Artist not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - The artist :artist does not exist
        '500':
          description: Server error on posting the album
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - server error on finding the artist in the db, please retry
                      - server error searching for the ismn in the db, please retry
                      - server error on saving the album to the db, please retry

  /artists/:name/merch:
    get:
      description: >-
        Gets the list of merch of an artist :name.
      summary: View all merch of an artist
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Collection of merch of an artist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Merch'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :name does not exist"
                      - "no merch from artist with name :name"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting objects"
    post:
      description: >-
        Allows to post a new product to the artist's merch
      summary: post new product
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
      requestBody:
        description: the product to be posted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merch'
      responses:
        '200':
          description: Product posted with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: "Error on posting the product"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /artists/:name/events:
    get:
      description: >-
        Gets the list of events of an artist :name.
      summary: View all events of an artist
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Collection of events of an artist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
        '404':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :name does not exist"
                      - "no events from artist with name :name"
        '500':
          description: 'service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error getting objects"
    post:
      description: >-
        Insert a new Event in the database, the artist should be authenticated to perform this action
      summary: Insert a new Event
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
      requestBody:
        description: the event to be posted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: 'Event inserted successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - 'The event has been correctly inserted in the db with id :id'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The field 'title' must be a non-empty string"
                      - "The field 'date' must be a non-empty string"
                      - "The field 'date' must be in the form dd/mm/yyyy hh:mm"
                      - "You can't add an event for a date in the past"
                      - "The field 'place' must be a non-empty string"
                      - "The field 'description' must be a non-empty string"
                      - "The field 'cost' must be a decimal number greater than zero"
        '404':
          description: 'Artist not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :artist does not exist"
        '409':
          description: 'Duplicated date'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "In this date there is already an event, please remove it first"
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string      

  /artists/:name/albums/:ismn:
    get:
      description: >-
        Gets an album by its :ismn of an artist :name.
      summary: View :ismn album of artist :name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: ismn
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'album :ismn of the artist :name'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
                      - "error on ismn param"
                      - "The album :ismn exists in db but the owner is not :name"
        '404':
          description: 'Service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The album :ismn does not exist"
                      - "The artist :name does not exist"
        '500':
          description: 'Resource Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    
    delete:
      description: >-
        Allows to delete an album in the artist's discography
      summary: delete album
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: ismn
          required: true
          schema:
            type: string
          description: the album's ismn
      responses:
        '200':
          description: Album deleted with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - The album has been correctly deleted from the db
        '404':
          description: Album not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - this album does not exists
        '500':
          description: Server error on deleting the album
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - server error on deleting the album, please retry
                      - server error on searching the album in the db, please retry
    put:
      description: >-
        Allows to change an album's data in the artist's discography
      summary: change album data
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: ismn
          required: true
          schema:
            type: string
          description: the album's ismn
      requestBody:
        description: the album's data to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        '201':
          description: Album's data changed with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Album doesn't exit
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - error: this album does not exist in the db
        '500':
          description: Server error on searching the album on the db
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - error: server error on finding the album data in the db, please retry

  /artists/:name/merch/:id:
    get:
      description: >-
        Gets a merch by its :id of an artist :name.
      summary: View :id merch of artist :name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'merch :ismn of the artist :name'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Merch'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
                      - "error on id param"
                      - "no merch with :id from artist with :name"
        '404':
          description: 'Service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The product :id does not exist"
                      - "The artist :name does not exist"
        '500':
          description: 'Resource Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      description: >-
        Allows to delete an product in the artist's merch
      summary: delete product
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: the product's id
      responses:
        '200':
          description: Product deleted with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error on deleting the product
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      description: >-
        Allows to change an product's data in the artist's merch
      summary: change product data
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: the product id
      requestBody:
        description: the product's data to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merch'
      responses:
        '200':
          description: Product's data changed with success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Error on changing the product's data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /artists/:name/events/:id:
    get:
      description: >-
        Gets a event by its :id of an artist :name.
      summary: View :id event of artist :name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'event :id of the artist :name'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "error on name param"
                      - "error on id param"
                      - "no events with :id from artist with :name"
        '404':
          description: 'Service Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The event :id does not exist"
                      - "The artist :name does not exist"
        '500':
          description: 'Resource Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      description: >-
        Delete an event from the artist's event list 
      summary: 
        Delete event
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: the event's id
      responses:
        '200':
          description: 'Event deleted successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - "Event deleted successfully"
        '400':
          description: 'Request error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The id field should be a non-empty string"
                      - "The id is not valid"
        '404':
          description: 'Not found error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :artist does not exist"
                      - "There is no event with id :id created by :artist"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      description: >-
        Update an event from the artist's event list, one or more fields can be omitted
      summary: 
        Update event
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: the artist's name
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: the event's id
      requestBody:
        description: the event's data to be changed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: 'Event updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - "Event updated successfully"
        '400':
          description: 'Request error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The id field should be a non-empty string"
                      - "The id is not valid"
                      - "The field 'title' must be a non-empty string"
                      - "The field 'date' must be a non-empty string"
                      - "The field 'date' must be in the form dd/mm/yyyy hh:mm"
                      - "The new date can't be a date in the past"
                      - "The field 'place' must be a non-empty string"
                      - "The field 'description' must be a non-empty string"
                      - "The field 'cost' must be a decimal number greater than zero"

        '404':
          description: 'Not found error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The artist :artist does not exist"
                      - "There is no event with id :id created by :artist"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "Error updating the db"
                    
components:
  schemas:
  
    User:
      type: object
      required:
        - username
        - email
        - bio
        - password
        - userType
      properties:
        username:
          type: string
          description: 'Name of the artist'
        email:
          type: string
          description: 'Email of the artist'
        bio:
          type: string
          description: 'bio of the artist'
        password:
          type: string
          description: 'password of the artist'
        userType:
          type: string
          description: 'user/artist/moderator'
      example:
        username: "system of a down"
        email: "SOAD@ofAdown.com"
        bio: "gruppo statunitense metal"
        password: "anguria66"
        usertype: "artist"

    Album:
      type: object
      required:
        - title
        - ISMN
        - year
        - genre
        - tracklist
        - cost
        - owner
      properties:
        title:
          type: string
          description: 'title of the album'
        ISMN:
          type: string
          description: 'ISMN code of the album'
        year:
          type: number
          description: 'year of the album'
        genre:
          type: string
          description: 'type of music album'
        tracklist:
          type: array
          description: 'the tracklist of the album'
        cost:
          type: number
          description: 'the cost of the album'
        owner:
          type: string
          description: 'the owner of the album'
      example:
        title: "tri ripetae"
        ISMN: "20304020uk32"
        year: 1995
        genre: "electronic/ambient"
        tracklist: {"track1":"track1","track2":"track2"}
        cost: 10.0
        owner: "Autechre"

    Event:
      type: object
      required:
        - title
        - ID
        - date
        - place
        - description
        - cost
        - owner
      properties:
        title:
          type: string
          description: 'Title of the event'
        ID:
          type: string
          description: 'ID of the event'
        date:
          type: string
          description: 'date of the event'
        place:
          type: string
          description: 'place of the event'
        description:
          type: string
          description: 'description of the event'
        cost:
          type: number
          description: 'cost of the event'
        owner:
          type: string
          description: 'owner of the event'
      example:
        title: "release Party"
        date: "10/10/21"
        place: "Turin"
        description: "reseal party for the new Autechre's album 'Sign'"
        cost: 35.0
        owner: "Autechre"

    Merch:
      type: object
      required:
        - title
        - ID
        - description
        - qty
        - cost
        - owner
      properties:
        title:
          type: string
          description: 'Title of the merch'
        ID:
          type: string
          description: 'ID of the merch'
        description:
          type: string
          description: 'info of the merch'
        qty:
          type: number
          description: 'number of available objects'
        cost:
          type: number
          description: 'cost of the merch'
        owner:
          type: string
          description: 'owner of the merch'
      example:
        title: "Sign album"
        ID: "432452"
        description: "new Autechre's album"
        qty: 500
        cost: 10.0
        owner: "Autechre"