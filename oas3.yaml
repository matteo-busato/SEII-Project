openapi: 3.0.0
info:
  version: '1.0'
  title: "EasyMusic OpenAPI 3.0"
  description: API for managing artists and their discography.
  license:
    name: MIT
servers:
  - url: http://localhost:8000/api/v1
    description: Localhost
paths:

  /users:
    post:
      description: >-
        Register a new user to the website as a simple user
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
            example:
              name: "John"
              email: "john@gmail.com"
              password: "5up3rS3cr3t4ndL0ngP4ssw0rd"
      responses:
        '201':
          description: 'User registered successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - 'User registered successfully'
        '400':
          description: 'Request Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "The field 'name' must be a non-empty string"
                      - "The field 'email' must be a non-empty string"
                      - "The field 'password' must be a non-empty string"
                      - "Invalid email format"
        '409':
          description: 'Duplicated email'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - "This email is already registered"

  /artists:
    get:
      description: >-
        Gets the list of artists.
      summary: View all artists
      responses:
        '200':
          description: 'Collection of artists'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
  
  /artists/{artist-name}:
    get:
      description: >-
        Gets the artist specified.
      summary: View an artist
      parameters:
        - in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: 'information about an artist'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Artist'

  /events:
    get:
      description: >-
        Gets the list of events.
      summary: View all events
      responses:
        '200':
          description: 'Collection of events'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
                  
  /artists/{artist-name}/events:
    get:
      description: >-
        Gets the list of events of an {artist-name}.
      summary: View all events of an artist
      parameters:
        - in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: 'Collection of events of an artist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /merch:
    get:
      description: >-
        Gets the list of merch.
      summary: View all merch
      responses:
        '200':
          description: 'Collection of merch'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Merch'
          
  /artists/{artist-name}/merch:
    get:
      description: >-
        Gets the list of merch of an {artist-name}.
      summary: View all merch of an artist
      parameters:
        - in: path
          name: name
          required: true
          type: string
      responses:
        '200':
          description: 'Collection of merch of an artist'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Merch'
                  
components:
  schemas:
    Student:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          description: 'ID of the user'
        email:
          type: string
          description: 'Email address of the user'
    Artist:
      type: object
      required:
        - name
        - email
        - bio
      properties:
        name:
          type: string
          description: 'Name of the artist'
        email:
          type: string
          description: 'Email of the artist'
        bio:
          type: string
          description: 'bio of the artist'
      example:
        name: "system of a down"
        email: "fuckthesystem@ofAdown.com"
        bio: "gruppo USA/Armenia che fanno musica metal pazzerella"
        
    Event:
      type: object
      required:
        - title
        - date
        - place
        - artist
      properties:
        title:
          type: string
          description: 'Title of the event'
        date:
          type: string
          description: 'date of the event'
        place:
          type: string
          description: 'place of the event'
        artist:
          type: string
          description: 'owner of the event'
      example:
        title: ""
        date: ""
        place: ""
        artist: ""
        
    Merch:
      type: object
      required:
        - title
        - info
        - cost
        - artist
      properties:
        title:
          type: string
          description: 'Title of the merch'
        info:
          type: string
          description: 'info of the merch'
        cost:
          type: float
          description: 'cost of the merch'
        artist:
          type: string
          description: 'owner of the merch'
      example:
        title: ""
        info: ""
        cost: ""
        artist: ""